/**
 *
 *  Indication.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Indication.h"
#include "User.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Indication::Cols::_id = "id";
const std::string Indication::Cols::_id_user = "id_user";
const std::string Indication::Cols::_month = "month";
const std::string Indication::Cols::_year = "year";
const std::string Indication::Cols::_T1 = "T1";
const std::string Indication::Cols::_T2 = "T2";
const std::string Indication::primaryKeyName = "id";
const bool Indication::hasPrimaryKey = true;
const std::string Indication::tableName = "indication";

const std::vector<typename Indication::MetaData> Indication::metaData_={
{"id","uint64_t","integer",8,1,1,1},
{"id_user","uint64_t","integer",8,0,0,1},
{"month","uint64_t","integer",8,0,0,0},
{"year","uint64_t","integer",8,0,0,0},
{"T1","uint64_t","integer",8,0,0,0},
{"T2","uint64_t","integer",8,0,0,0}
};
const std::string &Indication::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Indication::Indication(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["id_user"].isNull())
        {
            idUser_=std::make_shared<uint64_t>(r["id_user"].as<uint64_t>());
        }
        if(!r["month"].isNull())
        {
            month_=std::make_shared<uint64_t>(r["month"].as<uint64_t>());
        }
        if(!r["year"].isNull())
        {
            year_=std::make_shared<uint64_t>(r["year"].as<uint64_t>());
        }
        if(!r["T1"].isNull())
        {
            t1_=std::make_shared<uint64_t>(r["T1"].as<uint64_t>());
        }
        if(!r["T2"].isNull())
        {
            t2_=std::make_shared<uint64_t>(r["T2"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            idUser_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            month_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            year_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            t1_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            t2_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

Indication::Indication(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            idUser_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            month_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            year_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            t1_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            t2_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
}

Indication::Indication(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("id_user"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["id_user"].isNull())
        {
            idUser_=std::make_shared<uint64_t>((uint64_t)pJson["id_user"].asUInt64());
        }
    }
    if(pJson.isMember("month"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["month"].isNull())
        {
            month_=std::make_shared<uint64_t>((uint64_t)pJson["month"].asUInt64());
        }
    }
    if(pJson.isMember("year"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["year"].isNull())
        {
            year_=std::make_shared<uint64_t>((uint64_t)pJson["year"].asUInt64());
        }
    }
    if(pJson.isMember("T1"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["T1"].isNull())
        {
            t1_=std::make_shared<uint64_t>((uint64_t)pJson["T1"].asUInt64());
        }
    }
    if(pJson.isMember("T2"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["T2"].isNull())
        {
            t2_=std::make_shared<uint64_t>((uint64_t)pJson["T2"].asUInt64());
        }
    }
}

void Indication::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            idUser_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            month_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            year_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            t1_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            t2_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
}

void Indication::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("id_user"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["id_user"].isNull())
        {
            idUser_=std::make_shared<uint64_t>((uint64_t)pJson["id_user"].asUInt64());
        }
    }
    if(pJson.isMember("month"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["month"].isNull())
        {
            month_=std::make_shared<uint64_t>((uint64_t)pJson["month"].asUInt64());
        }
    }
    if(pJson.isMember("year"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["year"].isNull())
        {
            year_=std::make_shared<uint64_t>((uint64_t)pJson["year"].asUInt64());
        }
    }
    if(pJson.isMember("T1"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["T1"].isNull())
        {
            t1_=std::make_shared<uint64_t>((uint64_t)pJson["T1"].asUInt64());
        }
    }
    if(pJson.isMember("T2"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["T2"].isNull())
        {
            t2_=std::make_shared<uint64_t>((uint64_t)pJson["T2"].asUInt64());
        }
    }
}

const uint64_t &Indication::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Indication::getId() const noexcept
{
    return id_;
}
void Indication::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Indication::PrimaryKeyType & Indication::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &Indication::getValueOfIdUser() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(idUser_)
        return *idUser_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Indication::getIdUser() const noexcept
{
    return idUser_;
}
void Indication::setIdUser(const uint64_t &pIdUser) noexcept
{
    idUser_ = std::make_shared<uint64_t>(pIdUser);
    dirtyFlag_[1] = true;
}

const uint64_t &Indication::getValueOfMonth() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(month_)
        return *month_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Indication::getMonth() const noexcept
{
    return month_;
}
void Indication::setMonth(const uint64_t &pMonth) noexcept
{
    month_ = std::make_shared<uint64_t>(pMonth);
    dirtyFlag_[2] = true;
}
void Indication::setMonthToNull() noexcept
{
    month_.reset();
    dirtyFlag_[2] = true;
}

const uint64_t &Indication::getValueOfYear() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(year_)
        return *year_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Indication::getYear() const noexcept
{
    return year_;
}
void Indication::setYear(const uint64_t &pYear) noexcept
{
    year_ = std::make_shared<uint64_t>(pYear);
    dirtyFlag_[3] = true;
}
void Indication::setYearToNull() noexcept
{
    year_.reset();
    dirtyFlag_[3] = true;
}

const uint64_t &Indication::getValueOfT1() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(t1_)
        return *t1_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Indication::getT1() const noexcept
{
    return t1_;
}
void Indication::setT1(const uint64_t &pT1) noexcept
{
    t1_ = std::make_shared<uint64_t>(pT1);
    dirtyFlag_[4] = true;
}
void Indication::setT1ToNull() noexcept
{
    t1_.reset();
    dirtyFlag_[4] = true;
}

const uint64_t &Indication::getValueOfT2() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(t2_)
        return *t2_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Indication::getT2() const noexcept
{
    return t2_;
}
void Indication::setT2(const uint64_t &pT2) noexcept
{
    t2_ = std::make_shared<uint64_t>(pT2);
    dirtyFlag_[5] = true;
}
void Indication::setT2ToNull() noexcept
{
    t2_.reset();
    dirtyFlag_[5] = true;
}

void Indication::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Indication::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id_user",
        "month",
        "year",
        "T1",
        "T2"
    };
    return inCols;
}

void Indication::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getIdUser())
        {
            binder << getValueOfIdUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getMonth())
        {
            binder << getValueOfMonth();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getYear())
        {
            binder << getValueOfYear();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getT1())
        {
            binder << getValueOfT1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getT2())
        {
            binder << getValueOfT2();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Indication::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void Indication::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getIdUser())
        {
            binder << getValueOfIdUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getMonth())
        {
            binder << getValueOfMonth();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getYear())
        {
            binder << getValueOfYear();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getT1())
        {
            binder << getValueOfT1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getT2())
        {
            binder << getValueOfT2();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Indication::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getIdUser())
    {
        ret["id_user"]=(Json::UInt64)getValueOfIdUser();
    }
    else
    {
        ret["id_user"]=Json::Value();
    }
    if(getMonth())
    {
        ret["month"]=(Json::UInt64)getValueOfMonth();
    }
    else
    {
        ret["month"]=Json::Value();
    }
    if(getYear())
    {
        ret["year"]=(Json::UInt64)getValueOfYear();
    }
    else
    {
        ret["year"]=Json::Value();
    }
    if(getT1())
    {
        ret["T1"]=(Json::UInt64)getValueOfT1();
    }
    else
    {
        ret["T1"]=Json::Value();
    }
    if(getT2())
    {
        ret["T2"]=(Json::UInt64)getValueOfT2();
    }
    else
    {
        ret["T2"]=Json::Value();
    }
    return ret;
}

Json::Value Indication::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getIdUser())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfIdUser();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getMonth())
            {
                ret[pMasqueradingVector[2]]=(Json::UInt64)getValueOfMonth();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getYear())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfYear();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getT1())
            {
                ret[pMasqueradingVector[4]]=(Json::UInt64)getValueOfT1();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getT2())
            {
                ret[pMasqueradingVector[5]]=(Json::UInt64)getValueOfT2();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getIdUser())
    {
        ret["id_user"]=(Json::UInt64)getValueOfIdUser();
    }
    else
    {
        ret["id_user"]=Json::Value();
    }
    if(getMonth())
    {
        ret["month"]=(Json::UInt64)getValueOfMonth();
    }
    else
    {
        ret["month"]=Json::Value();
    }
    if(getYear())
    {
        ret["year"]=(Json::UInt64)getValueOfYear();
    }
    else
    {
        ret["year"]=Json::Value();
    }
    if(getT1())
    {
        ret["T1"]=(Json::UInt64)getValueOfT1();
    }
    else
    {
        ret["T1"]=Json::Value();
    }
    if(getT2())
    {
        ret["T2"]=(Json::UInt64)getValueOfT2();
    }
    else
    {
        ret["T2"]=Json::Value();
    }
    return ret;
}

bool Indication::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("id_user"))
    {
        if(!validJsonOfField(1, "id_user", pJson["id_user"], err, true))
            return false;
    }
    else
    {
        err="The id_user column cannot be null";
        return false;
    }
    if(pJson.isMember("month"))
    {
        if(!validJsonOfField(2, "month", pJson["month"], err, true))
            return false;
    }
    if(pJson.isMember("year"))
    {
        if(!validJsonOfField(3, "year", pJson["year"], err, true))
            return false;
    }
    if(pJson.isMember("T1"))
    {
        if(!validJsonOfField(4, "T1", pJson["T1"], err, true))
            return false;
    }
    if(pJson.isMember("T2"))
    {
        if(!validJsonOfField(5, "T2", pJson["T2"], err, true))
            return false;
    }
    return true;
}
bool Indication::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Indication::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("id_user"))
    {
        if(!validJsonOfField(1, "id_user", pJson["id_user"], err, false))
            return false;
    }
    if(pJson.isMember("month"))
    {
        if(!validJsonOfField(2, "month", pJson["month"], err, false))
            return false;
    }
    if(pJson.isMember("year"))
    {
        if(!validJsonOfField(3, "year", pJson["year"], err, false))
            return false;
    }
    if(pJson.isMember("T1"))
    {
        if(!validJsonOfField(4, "T1", pJson["T1"], err, false))
            return false;
    }
    if(pJson.isMember("T2"))
    {
        if(!validJsonOfField(5, "T2", pJson["T2"], err, false))
            return false;
    }
    return true;
}
bool Indication::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Indication::validJsonOfField(size_t index,
                                  const std::string &fieldName,
                                  const Json::Value &pJson,
                                  std::string &err,
                                  bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
User Indication::getUser(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<User>> pro(new std::promise<User>);
    std::future<User> f = pro->get_future();
    getUser(clientPtr, [&pro] (User result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void Indication::getUser(const DbClientPtr &clientPtr,
                         const std::function<void(User)> &rcb,
                         const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from User where id = ?";
    *clientPtr << sql
               << *idUser_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(User(r[0]));
                    }
               }
               >> ecb;
}
