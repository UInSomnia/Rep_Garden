/**
 *
 *  Plot.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Plot.h"
#include "Counter.h"
#include "UserToPlot.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Plot::Cols::_id = "id";
const std::string Plot::Cols::_number = "number";
const std::string Plot::primaryKeyName = "id";
const bool Plot::hasPrimaryKey = true;
const std::string Plot::tableName = "plot";

const std::vector<typename Plot::MetaData> Plot::metaData_={
{"id","uint64_t","integer",8,1,1,0},
{"number","std::string","text",0,0,0,0}
};
const std::string &Plot::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Plot::Plot(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["number"].isNull())
        {
            number_=std::make_shared<std::string>(r["number"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            number_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Plot::Plot(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            number_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

Plot::Plot(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("number"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["number"].isNull())
        {
            number_=std::make_shared<std::string>(pJson["number"].asString());
        }
    }
}

void Plot::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            number_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

void Plot::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("number"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["number"].isNull())
        {
            number_=std::make_shared<std::string>(pJson["number"].asString());
        }
    }
}

const uint64_t &Plot::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Plot::getId() const noexcept
{
    return id_;
}
void Plot::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
void Plot::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}
const typename Plot::PrimaryKeyType & Plot::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Plot::getValueOfNumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(number_)
        return *number_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Plot::getNumber() const noexcept
{
    return number_;
}
void Plot::setNumber(const std::string &pNumber) noexcept
{
    number_ = std::make_shared<std::string>(pNumber);
    dirtyFlag_[1] = true;
}
void Plot::setNumber(std::string &&pNumber) noexcept
{
    number_ = std::make_shared<std::string>(std::move(pNumber));
    dirtyFlag_[1] = true;
}
void Plot::setNumberToNull() noexcept
{
    number_.reset();
    dirtyFlag_[1] = true;
}

void Plot::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Plot::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "number"
    };
    return inCols;
}

void Plot::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getNumber())
        {
            binder << getValueOfNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Plot::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void Plot::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getNumber())
        {
            binder << getValueOfNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Plot::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getNumber())
    {
        ret["number"]=getValueOfNumber();
    }
    else
    {
        ret["number"]=Json::Value();
    }
    return ret;
}

Json::Value Plot::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getNumber())
            {
                ret[pMasqueradingVector[1]]=getValueOfNumber();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getNumber())
    {
        ret["number"]=getValueOfNumber();
    }
    else
    {
        ret["number"]=Json::Value();
    }
    return ret;
}

bool Plot::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("number"))
    {
        if(!validJsonOfField(1, "number", pJson["number"], err, true))
            return false;
    }
    return true;
}
bool Plot::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Plot::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("number"))
    {
        if(!validJsonOfField(1, "number", pJson["number"], err, false))
            return false;
    }
    return true;
}
bool Plot::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Plot::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
std::vector<UserToPlot> Plot::getUserToPlot(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<std::vector<UserToPlot>>> pro(new std::promise<std::vector<UserToPlot>>);
    std::future<std::vector<UserToPlot>> f = pro->get_future();
    getUserToPlot(clientPtr, [&pro] (std::vector<UserToPlot> result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void Plot::getUserToPlot(const DbClientPtr &clientPtr,
                         const std::function<void(std::vector<UserToPlot>)> &rcb,
                         const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from User_To_Plot where id_plot = ?";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<UserToPlot> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(UserToPlot(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<Counter> Plot::getCounter(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<std::vector<Counter>>> pro(new std::promise<std::vector<Counter>>);
    std::future<std::vector<Counter>> f = pro->get_future();
    getCounter(clientPtr, [&pro] (std::vector<Counter> result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void Plot::getCounter(const DbClientPtr &clientPtr,
                      const std::function<void(std::vector<Counter>)> &rcb,
                      const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from Counter where id_plot = ?";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Counter> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Counter(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
