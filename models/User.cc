/**
 *
 *  User.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "User.h"
#include "Role.h"
#include "UserToPlot.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string User::Cols::_id = "id";
const std::string User::Cols::_id_role = "id_role";
const std::string User::Cols::_name = "name";
const std::string User::Cols::_surname = "surname";
const std::string User::Cols::_patronymic = "patronymic";
const std::string User::Cols::_phone = "phone";
const std::string User::Cols::_mail = "mail";
const std::string User::Cols::_password = "password";
const std::string User::Cols::_is_banned = "is_banned";
const std::string User::primaryKeyName = "id";
const bool User::hasPrimaryKey = true;
const std::string User::tableName = "user";

const std::vector<typename User::MetaData> User::metaData_={
{"id","uint64_t","integer",8,1,1,0},
{"id_role","uint64_t","integer",8,0,0,0},
{"name","std::string","text",0,0,0,0},
{"surname","std::string","text",0,0,0,0},
{"patronymic","std::string","text",0,0,0,0},
{"phone","std::string","text",0,0,0,0},
{"mail","std::string","text",0,0,0,0},
{"password","std::string","text",0,0,0,0},
{"is_banned","uint64_t","integer",8,0,0,0}
};
const std::string &User::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
User::User(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["id_role"].isNull())
        {
            idRole_=std::make_shared<uint64_t>(r["id_role"].as<uint64_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["surname"].isNull())
        {
            surname_=std::make_shared<std::string>(r["surname"].as<std::string>());
        }
        if(!r["patronymic"].isNull())
        {
            patronymic_=std::make_shared<std::string>(r["patronymic"].as<std::string>());
        }
        if(!r["phone"].isNull())
        {
            phone_=std::make_shared<std::string>(r["phone"].as<std::string>());
        }
        if(!r["mail"].isNull())
        {
            mail_=std::make_shared<std::string>(r["mail"].as<std::string>());
        }
        if(!r["password"].isNull())
        {
            password_=std::make_shared<std::string>(r["password"].as<std::string>());
        }
        if(!r["is_banned"].isNull())
        {
            isBanned_=std::make_shared<uint64_t>(r["is_banned"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            idRole_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            surname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            patronymic_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            phone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            mail_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            password_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            isBanned_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

User::User(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            idRole_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            surname_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            patronymic_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            mail_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            isBanned_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
}

User::User(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("id_role"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["id_role"].isNull())
        {
            idRole_=std::make_shared<uint64_t>((uint64_t)pJson["id_role"].asUInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("surname"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["surname"].isNull())
        {
            surname_=std::make_shared<std::string>(pJson["surname"].asString());
        }
    }
    if(pJson.isMember("patronymic"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["patronymic"].isNull())
        {
            patronymic_=std::make_shared<std::string>(pJson["patronymic"].asString());
        }
    }
    if(pJson.isMember("phone"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["phone"].asString());
        }
    }
    if(pJson.isMember("mail"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["mail"].isNull())
        {
            mail_=std::make_shared<std::string>(pJson["mail"].asString());
        }
    }
    if(pJson.isMember("password"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if(pJson.isMember("is_banned"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["is_banned"].isNull())
        {
            isBanned_=std::make_shared<uint64_t>((uint64_t)pJson["is_banned"].asUInt64());
        }
    }
}

void User::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            idRole_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            surname_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            patronymic_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            mail_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            isBanned_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
}

void User::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("id_role"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["id_role"].isNull())
        {
            idRole_=std::make_shared<uint64_t>((uint64_t)pJson["id_role"].asUInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("surname"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["surname"].isNull())
        {
            surname_=std::make_shared<std::string>(pJson["surname"].asString());
        }
    }
    if(pJson.isMember("patronymic"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["patronymic"].isNull())
        {
            patronymic_=std::make_shared<std::string>(pJson["patronymic"].asString());
        }
    }
    if(pJson.isMember("phone"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["phone"].asString());
        }
    }
    if(pJson.isMember("mail"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["mail"].isNull())
        {
            mail_=std::make_shared<std::string>(pJson["mail"].asString());
        }
    }
    if(pJson.isMember("password"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if(pJson.isMember("is_banned"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["is_banned"].isNull())
        {
            isBanned_=std::make_shared<uint64_t>((uint64_t)pJson["is_banned"].asUInt64());
        }
    }
}

const uint64_t &User::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &User::getId() const noexcept
{
    return id_;
}
void User::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
void User::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}
const typename User::PrimaryKeyType & User::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &User::getValueOfIdRole() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(idRole_)
        return *idRole_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &User::getIdRole() const noexcept
{
    return idRole_;
}
void User::setIdRole(const uint64_t &pIdRole) noexcept
{
    idRole_ = std::make_shared<uint64_t>(pIdRole);
    dirtyFlag_[1] = true;
}
void User::setIdRoleToNull() noexcept
{
    idRole_.reset();
    dirtyFlag_[1] = true;
}

const std::string &User::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getName() const noexcept
{
    return name_;
}
void User::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[2] = true;
}
void User::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[2] = true;
}
void User::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[2] = true;
}

const std::string &User::getValueOfSurname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(surname_)
        return *surname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getSurname() const noexcept
{
    return surname_;
}
void User::setSurname(const std::string &pSurname) noexcept
{
    surname_ = std::make_shared<std::string>(pSurname);
    dirtyFlag_[3] = true;
}
void User::setSurname(std::string &&pSurname) noexcept
{
    surname_ = std::make_shared<std::string>(std::move(pSurname));
    dirtyFlag_[3] = true;
}
void User::setSurnameToNull() noexcept
{
    surname_.reset();
    dirtyFlag_[3] = true;
}

const std::string &User::getValueOfPatronymic() const noexcept
{
    const static std::string defaultValue = std::string();
    if(patronymic_)
        return *patronymic_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getPatronymic() const noexcept
{
    return patronymic_;
}
void User::setPatronymic(const std::string &pPatronymic) noexcept
{
    patronymic_ = std::make_shared<std::string>(pPatronymic);
    dirtyFlag_[4] = true;
}
void User::setPatronymic(std::string &&pPatronymic) noexcept
{
    patronymic_ = std::make_shared<std::string>(std::move(pPatronymic));
    dirtyFlag_[4] = true;
}
void User::setPatronymicToNull() noexcept
{
    patronymic_.reset();
    dirtyFlag_[4] = true;
}

const std::string &User::getValueOfPhone() const noexcept
{
    const static std::string defaultValue = std::string();
    if(phone_)
        return *phone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getPhone() const noexcept
{
    return phone_;
}
void User::setPhone(const std::string &pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(pPhone);
    dirtyFlag_[5] = true;
}
void User::setPhone(std::string &&pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(std::move(pPhone));
    dirtyFlag_[5] = true;
}
void User::setPhoneToNull() noexcept
{
    phone_.reset();
    dirtyFlag_[5] = true;
}

const std::string &User::getValueOfMail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(mail_)
        return *mail_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getMail() const noexcept
{
    return mail_;
}
void User::setMail(const std::string &pMail) noexcept
{
    mail_ = std::make_shared<std::string>(pMail);
    dirtyFlag_[6] = true;
}
void User::setMail(std::string &&pMail) noexcept
{
    mail_ = std::make_shared<std::string>(std::move(pMail));
    dirtyFlag_[6] = true;
}
void User::setMailToNull() noexcept
{
    mail_.reset();
    dirtyFlag_[6] = true;
}

const std::string &User::getValueOfPassword() const noexcept
{
    const static std::string defaultValue = std::string();
    if(password_)
        return *password_;
    return defaultValue;
}
const std::shared_ptr<std::string> &User::getPassword() const noexcept
{
    return password_;
}
void User::setPassword(const std::string &pPassword) noexcept
{
    password_ = std::make_shared<std::string>(pPassword);
    dirtyFlag_[7] = true;
}
void User::setPassword(std::string &&pPassword) noexcept
{
    password_ = std::make_shared<std::string>(std::move(pPassword));
    dirtyFlag_[7] = true;
}
void User::setPasswordToNull() noexcept
{
    password_.reset();
    dirtyFlag_[7] = true;
}

const uint64_t &User::getValueOfIsBanned() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(isBanned_)
        return *isBanned_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &User::getIsBanned() const noexcept
{
    return isBanned_;
}
void User::setIsBanned(const uint64_t &pIsBanned) noexcept
{
    isBanned_ = std::make_shared<uint64_t>(pIsBanned);
    dirtyFlag_[8] = true;
}
void User::setIsBannedToNull() noexcept
{
    isBanned_.reset();
    dirtyFlag_[8] = true;
}

void User::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &User::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id_role",
        "name",
        "surname",
        "patronymic",
        "phone",
        "mail",
        "password",
        "is_banned"
    };
    return inCols;
}

void User::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getIdRole())
        {
            binder << getValueOfIdRole();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSurname())
        {
            binder << getValueOfSurname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPatronymic())
        {
            binder << getValueOfPatronymic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getMail())
        {
            binder << getValueOfMail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getIsBanned())
        {
            binder << getValueOfIsBanned();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> User::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void User::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getIdRole())
        {
            binder << getValueOfIdRole();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSurname())
        {
            binder << getValueOfSurname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPatronymic())
        {
            binder << getValueOfPatronymic();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getMail())
        {
            binder << getValueOfMail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getIsBanned())
        {
            binder << getValueOfIsBanned();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value User::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getIdRole())
    {
        ret["id_role"]=(Json::UInt64)getValueOfIdRole();
    }
    else
    {
        ret["id_role"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getSurname())
    {
        ret["surname"]=getValueOfSurname();
    }
    else
    {
        ret["surname"]=Json::Value();
    }
    if(getPatronymic())
    {
        ret["patronymic"]=getValueOfPatronymic();
    }
    else
    {
        ret["patronymic"]=Json::Value();
    }
    if(getPhone())
    {
        ret["phone"]=getValueOfPhone();
    }
    else
    {
        ret["phone"]=Json::Value();
    }
    if(getMail())
    {
        ret["mail"]=getValueOfMail();
    }
    else
    {
        ret["mail"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    if(getIsBanned())
    {
        ret["is_banned"]=(Json::UInt64)getValueOfIsBanned();
    }
    else
    {
        ret["is_banned"]=Json::Value();
    }
    return ret;
}

Json::Value User::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getIdRole())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfIdRole();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[2]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSurname())
            {
                ret[pMasqueradingVector[3]]=getValueOfSurname();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPatronymic())
            {
                ret[pMasqueradingVector[4]]=getValueOfPatronymic();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getPhone())
            {
                ret[pMasqueradingVector[5]]=getValueOfPhone();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getMail())
            {
                ret[pMasqueradingVector[6]]=getValueOfMail();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getPassword())
            {
                ret[pMasqueradingVector[7]]=getValueOfPassword();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getIsBanned())
            {
                ret[pMasqueradingVector[8]]=(Json::UInt64)getValueOfIsBanned();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getIdRole())
    {
        ret["id_role"]=(Json::UInt64)getValueOfIdRole();
    }
    else
    {
        ret["id_role"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getSurname())
    {
        ret["surname"]=getValueOfSurname();
    }
    else
    {
        ret["surname"]=Json::Value();
    }
    if(getPatronymic())
    {
        ret["patronymic"]=getValueOfPatronymic();
    }
    else
    {
        ret["patronymic"]=Json::Value();
    }
    if(getPhone())
    {
        ret["phone"]=getValueOfPhone();
    }
    else
    {
        ret["phone"]=Json::Value();
    }
    if(getMail())
    {
        ret["mail"]=getValueOfMail();
    }
    else
    {
        ret["mail"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    if(getIsBanned())
    {
        ret["is_banned"]=(Json::UInt64)getValueOfIsBanned();
    }
    else
    {
        ret["is_banned"]=Json::Value();
    }
    return ret;
}

bool User::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("id_role"))
    {
        if(!validJsonOfField(1, "id_role", pJson["id_role"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(2, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("surname"))
    {
        if(!validJsonOfField(3, "surname", pJson["surname"], err, true))
            return false;
    }
    if(pJson.isMember("patronymic"))
    {
        if(!validJsonOfField(4, "patronymic", pJson["patronymic"], err, true))
            return false;
    }
    if(pJson.isMember("phone"))
    {
        if(!validJsonOfField(5, "phone", pJson["phone"], err, true))
            return false;
    }
    if(pJson.isMember("mail"))
    {
        if(!validJsonOfField(6, "mail", pJson["mail"], err, true))
            return false;
    }
    if(pJson.isMember("password"))
    {
        if(!validJsonOfField(7, "password", pJson["password"], err, true))
            return false;
    }
    if(pJson.isMember("is_banned"))
    {
        if(!validJsonOfField(8, "is_banned", pJson["is_banned"], err, true))
            return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool User::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("id_role"))
    {
        if(!validJsonOfField(1, "id_role", pJson["id_role"], err, false))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(2, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("surname"))
    {
        if(!validJsonOfField(3, "surname", pJson["surname"], err, false))
            return false;
    }
    if(pJson.isMember("patronymic"))
    {
        if(!validJsonOfField(4, "patronymic", pJson["patronymic"], err, false))
            return false;
    }
    if(pJson.isMember("phone"))
    {
        if(!validJsonOfField(5, "phone", pJson["phone"], err, false))
            return false;
    }
    if(pJson.isMember("mail"))
    {
        if(!validJsonOfField(6, "mail", pJson["mail"], err, false))
            return false;
    }
    if(pJson.isMember("password"))
    {
        if(!validJsonOfField(7, "password", pJson["password"], err, false))
            return false;
    }
    if(pJson.isMember("is_banned"))
    {
        if(!validJsonOfField(8, "is_banned", pJson["is_banned"], err, false))
            return false;
    }
    return true;
}
bool User::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool User::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Role User::getRole(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<Role>> pro(new std::promise<Role>);
    std::future<Role> f = pro->get_future();
    getRole(clientPtr, [&pro] (Role result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void User::getRole(const DbClientPtr &clientPtr,
                   const std::function<void(Role)> &rcb,
                   const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from Role where id = ?";
    *clientPtr << sql
               << *idRole_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Role(r[0]));
                    }
               }
               >> ecb;
}
std::vector<UserToPlot> User::getUserToPlot(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<std::vector<UserToPlot>>> pro(new std::promise<std::vector<UserToPlot>>);
    std::future<std::vector<UserToPlot>> f = pro->get_future();
    getUserToPlot(clientPtr, [&pro] (std::vector<UserToPlot> result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void User::getUserToPlot(const DbClientPtr &clientPtr,
                         const std::function<void(std::vector<UserToPlot>)> &rcb,
                         const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from User_To_Plot where id_user = ?";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<UserToPlot> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(UserToPlot(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
