/**
 *
 *  UserToPlot.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "UserToPlot.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string UserToPlot::Cols::_id = "id";
const std::string UserToPlot::Cols::_id_user = "id_user";
const std::string UserToPlot::Cols::_id_plot = "id_plot";
const std::string UserToPlot::Cols::_start_date = "start_date";
const std::string UserToPlot::Cols::_finish_date = "finish_date";
const std::string UserToPlot::primaryKeyName = "id";
const bool UserToPlot::hasPrimaryKey = true;
const std::string UserToPlot::tableName = "user_to_plot";

const std::vector<typename UserToPlot::MetaData> UserToPlot::metaData_={
{"id","uint64_t","integer",8,1,1,0},
{"id_user","uint64_t","integer",8,0,0,0},
{"id_plot","uint64_t","integer",8,0,0,0},
{"start_date","::trantor::Date","datetime",0,0,0,0},
{"finish_date","::trantor::Date","datetime",0,0,0,0}
};
const std::string &UserToPlot::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
UserToPlot::UserToPlot(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["id_user"].isNull())
        {
            idUser_=std::make_shared<uint64_t>(r["id_user"].as<uint64_t>());
        }
        if(!r["id_plot"].isNull())
        {
            idPlot_=std::make_shared<uint64_t>(r["id_plot"].as<uint64_t>());
        }
        if(!r["start_date"].isNull())
        {
            auto timeStr = r["start_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                startDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["finish_date"].isNull())
        {
            auto timeStr = r["finish_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                finishDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            idUser_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            idPlot_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                startDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                finishDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

UserToPlot::UserToPlot(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            idUser_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            idPlot_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                startDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                finishDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

UserToPlot::UserToPlot(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("id_user"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["id_user"].isNull())
        {
            idUser_=std::make_shared<uint64_t>((uint64_t)pJson["id_user"].asUInt64());
        }
    }
    if(pJson.isMember("id_plot"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["id_plot"].isNull())
        {
            idPlot_=std::make_shared<uint64_t>((uint64_t)pJson["id_plot"].asUInt64());
        }
    }
    if(pJson.isMember("start_date"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["start_date"].isNull())
        {
            auto timeStr = pJson["start_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                startDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("finish_date"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["finish_date"].isNull())
        {
            auto timeStr = pJson["finish_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                finishDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void UserToPlot::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            idUser_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            idPlot_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                startDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                finishDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void UserToPlot::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("id_user"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["id_user"].isNull())
        {
            idUser_=std::make_shared<uint64_t>((uint64_t)pJson["id_user"].asUInt64());
        }
    }
    if(pJson.isMember("id_plot"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["id_plot"].isNull())
        {
            idPlot_=std::make_shared<uint64_t>((uint64_t)pJson["id_plot"].asUInt64());
        }
    }
    if(pJson.isMember("start_date"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["start_date"].isNull())
        {
            auto timeStr = pJson["start_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                startDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("finish_date"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["finish_date"].isNull())
        {
            auto timeStr = pJson["finish_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                finishDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const uint64_t &UserToPlot::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &UserToPlot::getId() const noexcept
{
    return id_;
}
void UserToPlot::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
void UserToPlot::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}
const typename UserToPlot::PrimaryKeyType & UserToPlot::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &UserToPlot::getValueOfIdUser() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(idUser_)
        return *idUser_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &UserToPlot::getIdUser() const noexcept
{
    return idUser_;
}
void UserToPlot::setIdUser(const uint64_t &pIdUser) noexcept
{
    idUser_ = std::make_shared<uint64_t>(pIdUser);
    dirtyFlag_[1] = true;
}
void UserToPlot::setIdUserToNull() noexcept
{
    idUser_.reset();
    dirtyFlag_[1] = true;
}

const uint64_t &UserToPlot::getValueOfIdPlot() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(idPlot_)
        return *idPlot_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &UserToPlot::getIdPlot() const noexcept
{
    return idPlot_;
}
void UserToPlot::setIdPlot(const uint64_t &pIdPlot) noexcept
{
    idPlot_ = std::make_shared<uint64_t>(pIdPlot);
    dirtyFlag_[2] = true;
}
void UserToPlot::setIdPlotToNull() noexcept
{
    idPlot_.reset();
    dirtyFlag_[2] = true;
}

const ::trantor::Date &UserToPlot::getValueOfStartDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(startDate_)
        return *startDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &UserToPlot::getStartDate() const noexcept
{
    return startDate_;
}
void UserToPlot::setStartDate(const ::trantor::Date &pStartDate) noexcept
{
    startDate_ = std::make_shared<::trantor::Date>(pStartDate);
    dirtyFlag_[3] = true;
}
void UserToPlot::setStartDateToNull() noexcept
{
    startDate_.reset();
    dirtyFlag_[3] = true;
}

const ::trantor::Date &UserToPlot::getValueOfFinishDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(finishDate_)
        return *finishDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &UserToPlot::getFinishDate() const noexcept
{
    return finishDate_;
}
void UserToPlot::setFinishDate(const ::trantor::Date &pFinishDate) noexcept
{
    finishDate_ = std::make_shared<::trantor::Date>(pFinishDate);
    dirtyFlag_[4] = true;
}
void UserToPlot::setFinishDateToNull() noexcept
{
    finishDate_.reset();
    dirtyFlag_[4] = true;
}

void UserToPlot::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &UserToPlot::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id_user",
        "id_plot",
        "start_date",
        "finish_date"
    };
    return inCols;
}

void UserToPlot::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getIdUser())
        {
            binder << getValueOfIdUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getIdPlot())
        {
            binder << getValueOfIdPlot();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getStartDate())
        {
            binder << getValueOfStartDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFinishDate())
        {
            binder << getValueOfFinishDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> UserToPlot::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void UserToPlot::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getIdUser())
        {
            binder << getValueOfIdUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getIdPlot())
        {
            binder << getValueOfIdPlot();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getStartDate())
        {
            binder << getValueOfStartDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFinishDate())
        {
            binder << getValueOfFinishDate();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value UserToPlot::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getIdUser())
    {
        ret["id_user"]=(Json::UInt64)getValueOfIdUser();
    }
    else
    {
        ret["id_user"]=Json::Value();
    }
    if(getIdPlot())
    {
        ret["id_plot"]=(Json::UInt64)getValueOfIdPlot();
    }
    else
    {
        ret["id_plot"]=Json::Value();
    }
    if(getStartDate())
    {
        ret["start_date"]=getStartDate()->toDbStringLocal();
    }
    else
    {
        ret["start_date"]=Json::Value();
    }
    if(getFinishDate())
    {
        ret["finish_date"]=getFinishDate()->toDbStringLocal();
    }
    else
    {
        ret["finish_date"]=Json::Value();
    }
    return ret;
}

Json::Value UserToPlot::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getIdUser())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfIdUser();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getIdPlot())
            {
                ret[pMasqueradingVector[2]]=(Json::UInt64)getValueOfIdPlot();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getStartDate())
            {
                ret[pMasqueradingVector[3]]=getStartDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getFinishDate())
            {
                ret[pMasqueradingVector[4]]=getFinishDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getIdUser())
    {
        ret["id_user"]=(Json::UInt64)getValueOfIdUser();
    }
    else
    {
        ret["id_user"]=Json::Value();
    }
    if(getIdPlot())
    {
        ret["id_plot"]=(Json::UInt64)getValueOfIdPlot();
    }
    else
    {
        ret["id_plot"]=Json::Value();
    }
    if(getStartDate())
    {
        ret["start_date"]=getStartDate()->toDbStringLocal();
    }
    else
    {
        ret["start_date"]=Json::Value();
    }
    if(getFinishDate())
    {
        ret["finish_date"]=getFinishDate()->toDbStringLocal();
    }
    else
    {
        ret["finish_date"]=Json::Value();
    }
    return ret;
}

bool UserToPlot::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("id_user"))
    {
        if(!validJsonOfField(1, "id_user", pJson["id_user"], err, true))
            return false;
    }
    if(pJson.isMember("id_plot"))
    {
        if(!validJsonOfField(2, "id_plot", pJson["id_plot"], err, true))
            return false;
    }
    if(pJson.isMember("start_date"))
    {
        if(!validJsonOfField(3, "start_date", pJson["start_date"], err, true))
            return false;
    }
    if(pJson.isMember("finish_date"))
    {
        if(!validJsonOfField(4, "finish_date", pJson["finish_date"], err, true))
            return false;
    }
    return true;
}
bool UserToPlot::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserToPlot::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("id_user"))
    {
        if(!validJsonOfField(1, "id_user", pJson["id_user"], err, false))
            return false;
    }
    if(pJson.isMember("id_plot"))
    {
        if(!validJsonOfField(2, "id_plot", pJson["id_plot"], err, false))
            return false;
    }
    if(pJson.isMember("start_date"))
    {
        if(!validJsonOfField(3, "start_date", pJson["start_date"], err, false))
            return false;
    }
    if(pJson.isMember("finish_date"))
    {
        if(!validJsonOfField(4, "finish_date", pJson["finish_date"], err, false))
            return false;
    }
    return true;
}
bool UserToPlot::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserToPlot::validJsonOfField(size_t index,
                                  const std::string &fieldName,
                                  const Json::Value &pJson,
                                  std::string &err,
                                  bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
